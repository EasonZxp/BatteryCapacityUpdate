Subject: [PATCH] Enable gadget hid function default

Vendor Gadget Usb Hid used 1 IN ep, report length 16 bytes

Change-Id: I91fad1fbd4a35120e78bf89ea6aa93a122ceb6e3
---
 drivers/usb/gadget/android.c               |  87 ++++++--
 drivers/usb/gadget/function/Makefile       |   3 +
 drivers/usb/gadget/function/f_hid.c        | 309 +++++++++++------------------
 drivers/usb/gadget/function/f_hid.h        |  17 ++
 drivers/usb/gadget/function/f_hid_vendor.c |  22 ++
 include/linux/usb/android.h                |   3 +
 6 files changed, 233 insertions(+), 208 deletions(-)
 create mode 100644 drivers/usb/gadget/function/f_hid.h
 create mode 100644 drivers/usb/gadget/function/f_hid_vendor.c

diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 1ed409d03e23..c19d520ac234 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -73,6 +73,8 @@
 #include "u_qc_ether.c"
 #include "f_gsi.c"
 #include "f_mass_storage.h"
+#include "f_hid.h"
+#include "f_hid_vendor.c"

 USB_ETHERNET_MODULE_PARAMETERS();
 #ifdef CONFIG_MEDIA_SUPPORT
@@ -3105,6 +3107,38 @@ static struct android_usb_function midi_function = {
 };
 #endif

+static int hid_function_init(struct android_usb_function *f, struct usb_composite_dev *cdev)
+{
+	return ghid_setup(cdev->gadget, 2);
+}
+
+static void hid_function_cleanup(struct android_usb_function *f)
+{
+	ghid_cleanup();
+}
+
+static int hid_function_bind_config(struct android_usb_function *f, struct usb_configuration *c)
+{
+	int ret;
+
+	printk(KERN_INFO "hid device vendor\n");
+	ret = hidg_bind_config(c, &ghid_device_android_vendor, 0);
+	if (ret) {
+		pr_info("%s: hid_function_bind_config vendor failed: %d\n", __func__, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static struct android_usb_function hid_function = {
+	.name		= "hid",
+	.init		= hid_function_init,
+	.cleanup	= hid_function_cleanup,
+	.bind_config	= hid_function_bind_config,
+};
+
+
 static int rndis_gsi_function_init(struct android_usb_function *f,
 					struct usb_composite_dev *cdev)
 {
@@ -3273,6 +3307,7 @@ static struct android_usb_function *supported_functions[] = {
 #ifdef CONFIG_SND_RAWMIDI
 	[ANDROID_MIDI] = &midi_function,
 #endif
+	[ANDROID_HID] = &hid_function,
 	[ANDROID_RNDIS_GSI] = &rndis_gsi_function,
 	[ANDROID_ECM_GSI] = &ecm_gsi_function,
 	[ANDROID_RMNET_GSI] = &rmnet_gsi_function,
@@ -3312,6 +3347,7 @@ static struct android_usb_function *default_functions[] = {
 #ifdef CONFIG_SND_RAWMIDI
 	&midi_function,
 #endif
+	&hid_function,
 	NULL
 };

@@ -3600,8 +3636,9 @@ functions_store(struct device *pdev, struct device_attribute *attr,
 	char buf[256], *b;
 	char aliases[256], *a;
 	int err;
-	int is_ffs;
+	//int is_ffs;
 	int ffs_enabled = 0;
+	int hid_enabled = 0;

 	mutex_lock(&dev->mutex);

@@ -3643,38 +3680,62 @@ functions_store(struct device *pdev, struct device_attribute *attr,
 		curr_conf = curr_conf->next;
 		while (conf_str) {
 			name = strsep(&conf_str, ",");
-			is_ffs = 0;
+			/*is_ffs = 0;*/
 			strlcpy(aliases, dev->ffs_aliases, sizeof(aliases));
 			a = aliases;

 			while (a) {
 				char *alias = strsep(&a, ",");
 				if (alias && !strcmp(name, alias)) {
-					is_ffs = 1;
+					/*is_ffs = 1;*/
+					name = "ffs";
 					break;
 				}
 			}

-			if (is_ffs) {
-				if (ffs_enabled)
-					continue;
-				err = android_enable_function(dev, conf, "ffs");
-				if (err)
-					pr_err("android_usb: Cannot enable ffs (%d)",
-									err);
-				else
-					ffs_enabled = 1;
+			/*if (is_ffs) {*/
+				/*if (ffs_enabled)*/
+					/*continue;*/
+				/*err = android_enable_function(dev, conf, "ffs");*/
+				/*if (err)*/
+					/*pr_err("android_usb: Cannot enable ffs (%d)",*/
+									/*err);*/
+				/*else*/
+					/*ffs_enabled = 1;*/
+			if (ffs_enabled && !strcmp(name, "ffs"))
 				continue;
-			}
+
+			if (hid_enabled && !strcmp(name, "hid"))
+				continue;
+			/*}*/

 			if (!strcmp(name, "rndis") &&
 				!strcmp(strim(rndis_transports), "BAM2BAM_IPA"))
 				name = "rndis_qc";

+			err = android_enable_function(dev, conf, name);
+			if (err) {
+				pr_err("android_usb: Cannot enable '%s' (%d)",
+							name, err);
+				continue;
+			}
+
+			if (!strcmp(name, "ffs"))
+				ffs_enabled = 1;
+
+			if (!strcmp(name, "hid"))
+				hid_enabled = 1;
+		}
+
+		/* Always enable HID gadget function. */
+		if (!hid_enabled) {
+			name = "hid";
 			err = android_enable_function(dev, conf, name);
 			if (err)
 				pr_err("android_usb: Cannot enable '%s' (%d)",
 							name, err);
+			else
+				hid_enabled = 1;
 		}
 	}

diff --git a/drivers/usb/gadget/function/Makefile b/drivers/usb/gadget/function/Makefile
index cc428c4d2b9d..b3d6da0b960e 100644
--- a/drivers/usb/gadget/function/Makefile
+++ b/drivers/usb/gadget/function/Makefile
@@ -47,4 +47,7 @@ obj-$(CONFIG_USB_F_AUDIO_SRC)   += usb_f_audio_source.o
 usb_f_accessory-y               := f_accessory.o
 obj-$(CONFIG_USB_F_ACC)         += usb_f_accessory.o

+usb_f_hid-y                     := f_hid.o
+obj-$(CONFIG_USB_G_ANDROID)     += usb_f_hid.o
+

diff --git a/drivers/usb/gadget/function/f_hid.c b/drivers/usb/gadget/function/f_hid.c
index 59ab62c92b66..7408f3d7ee3b 100644
--- a/drivers/usb/gadget/function/f_hid.c
+++ b/drivers/usb/gadget/function/f_hid.c
@@ -17,8 +17,10 @@
 #include <linux/poll.h>
 #include <linux/uaccess.h>
 #include <linux/wait.h>
+#include <linux/delay.h>
 #include <linux/sched.h>
 #include <linux/usb/g_hid.h>
+#include "f_hid.h"

 #include "u_f.h"

@@ -59,9 +61,45 @@ struct f_hidg {
 	struct usb_function		func;

 	struct usb_ep			*in_ep;
-	struct usb_ep			*out_ep;
 };

+/* Hacky device list to fix f_hidg_write being called after device destroyed.
+   It covers only most common race conditions, there will be rare crashes anyway. */
+enum { HACKY_DEVICE_LIST_SIZE = 4 };
+static struct f_hidg *hacky_device_list[HACKY_DEVICE_LIST_SIZE];
+static void hacky_device_list_add(struct f_hidg *hidg)
+{
+	int i;
+	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
+		if (!hacky_device_list[i]) {
+			hacky_device_list[i] = hidg;
+			return;
+		}
+	}
+	pr_err("%s: too many devices, not adding device %p\n", __func__, hidg);
+}
+static void hacky_device_list_remove(struct f_hidg *hidg)
+{
+	int i;
+	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
+		if (hacky_device_list[i] == hidg) {
+			hacky_device_list[i] = NULL;
+			return;
+		}
+	}
+	pr_err("%s: cannot find device %p\n", __func__, hidg);
+}
+static int hacky_device_list_check(struct f_hidg *hidg)
+{
+	int i;
+	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
+		if (hacky_device_list[i] == hidg) {
+			return 0;
+		}
+	}
+	return 1;
+}
+
 static inline struct f_hidg *func_to_hidg(struct usb_function *f)
 {
 	return container_of(f, struct f_hidg, func);
@@ -75,7 +113,7 @@ static struct usb_interface_descriptor hidg_interface_desc = {
 	.bDescriptorType	= USB_DT_INTERFACE,
 	/* .bInterfaceNumber	= DYNAMIC */
 	.bAlternateSetting	= 0,
-	.bNumEndpoints		= 2,
+	.bNumEndpoints		= 1,
 	.bInterfaceClass	= USB_CLASS_HID,
 	/* .bInterfaceSubClass	= DYNAMIC */
 	/* .bInterfaceProtocol	= DYNAMIC */
@@ -93,7 +131,6 @@ static struct hid_descriptor hidg_desc = {
 };

 /* High-Speed Support */
-
 static struct usb_endpoint_descriptor hidg_hs_in_ep_desc = {
 	.bLength		= USB_DT_ENDPOINT_SIZE,
 	.bDescriptorType	= USB_DT_ENDPOINT,
@@ -106,23 +143,10 @@ static struct usb_endpoint_descriptor hidg_hs_in_ep_desc = {
 				      */
 };

-static struct usb_endpoint_descriptor hidg_hs_out_ep_desc = {
-	.bLength		= USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType	= USB_DT_ENDPOINT,
-	.bEndpointAddress	= USB_DIR_OUT,
-	.bmAttributes		= USB_ENDPOINT_XFER_INT,
-	/*.wMaxPacketSize	= DYNAMIC */
-	.bInterval		= 4, /* FIXME: Add this field in the
-				      * HID gadget configuration?
-				      * (struct hidg_func_descriptor)
-				      */
-};
-
 static struct usb_descriptor_header *hidg_hs_descriptors[] = {
 	(struct usb_descriptor_header *)&hidg_interface_desc,
 	(struct usb_descriptor_header *)&hidg_desc,
 	(struct usb_descriptor_header *)&hidg_hs_in_ep_desc,
-	(struct usb_descriptor_header *)&hidg_hs_out_ep_desc,
 	NULL,
 };

@@ -139,93 +163,15 @@ static struct usb_endpoint_descriptor hidg_fs_in_ep_desc = {
 				       * (struct hidg_func_descriptor)
 				       */
 };
-
-static struct usb_endpoint_descriptor hidg_fs_out_ep_desc = {
-	.bLength		= USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType	= USB_DT_ENDPOINT,
-	.bEndpointAddress	= USB_DIR_OUT,
-	.bmAttributes		= USB_ENDPOINT_XFER_INT,
-	/*.wMaxPacketSize	= DYNAMIC */
-	.bInterval		= 10, /* FIXME: Add this field in the
-				       * HID gadget configuration?
-				       * (struct hidg_func_descriptor)
-				       */
-};
-
 static struct usb_descriptor_header *hidg_fs_descriptors[] = {
 	(struct usb_descriptor_header *)&hidg_interface_desc,
 	(struct usb_descriptor_header *)&hidg_desc,
 	(struct usb_descriptor_header *)&hidg_fs_in_ep_desc,
-	(struct usb_descriptor_header *)&hidg_fs_out_ep_desc,
 	NULL,
 };

 /*-------------------------------------------------------------------------*/
 /*                              Char Device                                */
-
-static ssize_t f_hidg_read(struct file *file, char __user *buffer,
-			size_t count, loff_t *ptr)
-{
-	struct f_hidg *hidg = file->private_data;
-	struct f_hidg_req_list *list;
-	struct usb_request *req;
-	unsigned long flags;
-	int ret;
-
-	if (!count)
-		return 0;
-
-	if (!access_ok(VERIFY_WRITE, buffer, count))
-		return -EFAULT;
-
-	spin_lock_irqsave(&hidg->spinlock, flags);
-
-#define READ_COND (!list_empty(&hidg->completed_out_req))
-
-	/* wait for at least one buffer to complete */
-	while (!READ_COND) {
-		spin_unlock_irqrestore(&hidg->spinlock, flags);
-		if (file->f_flags & O_NONBLOCK)
-			return -EAGAIN;
-
-		if (wait_event_interruptible(hidg->read_queue, READ_COND))
-			return -ERESTARTSYS;
-
-		spin_lock_irqsave(&hidg->spinlock, flags);
-	}
-
-	/* pick the first one */
-	list = list_first_entry(&hidg->completed_out_req,
-				struct f_hidg_req_list, list);
-	req = list->req;
-	count = min_t(unsigned int, count, req->actual - list->pos);
-	spin_unlock_irqrestore(&hidg->spinlock, flags);
-
-	/* copy to user outside spinlock */
-	count -= copy_to_user(buffer, req->buf + list->pos, count);
-	list->pos += count;
-
-	/*
-	 * if this request is completely handled and transfered to
-	 * userspace, remove its entry from the list and requeue it
-	 * again. Otherwise, we will revisit it again upon the next
-	 * call, taking into account its current read position.
-	 */
-	if (list->pos == req->actual) {
-		spin_lock_irqsave(&hidg->spinlock, flags);
-		list_del(&list->list);
-		kfree(list);
-		spin_unlock_irqrestore(&hidg->spinlock, flags);
-
-		req->length = hidg->report_length;
-		ret = usb_ep_queue(hidg->out_ep, req, GFP_KERNEL);
-		if (ret < 0)
-			return ret;
-	}
-
-	return count;
-}
-
 static void f_hidg_req_complete(struct usb_ep *ep, struct usb_request *req)
 {
 	struct f_hidg *hidg = (struct f_hidg *)ep->driver_data;
@@ -244,10 +190,16 @@ static ssize_t f_hidg_write(struct file *file, const char __user *buffer,
 {
 	struct f_hidg *hidg  = file->private_data;
 	ssize_t status = -ENOMEM;
+	int i = 0;

 	if (!access_ok(VERIFY_READ, buffer, count))
 		return -EFAULT;

+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to write to device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
+
 	mutex_lock(&hidg->lock);

 #define WRITE_COND (!hidg->write_pending)
@@ -262,11 +214,24 @@ static ssize_t f_hidg_write(struct file *file, const char __user *buffer,
 				hidg->write_queue, WRITE_COND))
 			return -ERESTARTSYS;

+		if (hacky_device_list_check(hidg)) {
+			pr_err("%s: trying to write to device %p that was destroyed\n", __func__, hidg);
+			return -EIO;
+		}
+
 		mutex_lock(&hidg->lock);
 	}

 	count  = min_t(unsigned, count, hidg->report_length);
 	status = copy_from_user(hidg->req->buf, buffer, count);
+	printk("\n======================================\n");
+	printk("will send count:%d\n", (int)count);
+	for(i=0; i<count; i++)
+	{
+		printk(" %x: ", *(buffer+i));
+	}
+	printk("\n");
+	printk("\n======================================\n");

 	if (status != 0) {
 		ERROR(hidg->func.config->cdev,
@@ -302,20 +267,26 @@ static unsigned int f_hidg_poll(struct file *file, poll_table *wait)
 	struct f_hidg	*hidg  = file->private_data;
 	unsigned int	ret = 0;

+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to poll device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
+
 	poll_wait(file, &hidg->read_queue, wait);
+
+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to poll device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
+
 	poll_wait(file, &hidg->write_queue, wait);

 	if (WRITE_COND)
 		ret |= POLLOUT | POLLWRNORM;
-
-	if (READ_COND)
-		ret |= POLLIN | POLLRDNORM;
-
 	return ret;
 }

 #undef WRITE_COND
-#undef READ_COND

 static int f_hidg_release(struct inode *inode, struct file *fd)
 {
@@ -342,25 +313,6 @@ static inline struct usb_request *hidg_alloc_ep_req(struct usb_ep *ep,
 	return alloc_ep_req(ep, length, length);
 }

-static void hidg_set_report_complete(struct usb_ep *ep, struct usb_request *req)
-{
-	struct f_hidg *hidg = (struct f_hidg *) req->context;
-	struct f_hidg_req_list *req_list;
-	unsigned long flags;
-
-	req_list = kzalloc(sizeof(*req_list), GFP_ATOMIC);
-	if (!req_list)
-		return;
-
-	req_list->req = req;
-
-	spin_lock_irqsave(&hidg->spinlock, flags);
-	list_add_tail(&req_list->list, &hidg->completed_out_req);
-	spin_unlock_irqrestore(&hidg->spinlock, flags);
-
-	wake_up(&hidg->read_queue);
-}
-
 static int hidg_setup(struct usb_function *f,
 		const struct usb_ctrlrequest *ctrl)
 {
@@ -373,13 +325,13 @@ static int hidg_setup(struct usb_function *f,
 	value	= __le16_to_cpu(ctrl->wValue);
 	length	= __le16_to_cpu(ctrl->wLength);

-	VDBG(cdev, "hid_setup crtl_request : bRequestType:0x%x bRequest:0x%x "
+	printk( "hid_setup crtl_request : bRequestType:0x%x bRequest:0x%x "
 		"Value:0x%x\n", ctrl->bRequestType, ctrl->bRequest, value);

 	switch ((ctrl->bRequestType << 8) | ctrl->bRequest) {
 	case ((USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
 		  | HID_REQ_GET_REPORT):
-		VDBG(cdev, "get_report\n");
+		printk( "get_report\n");

 		/* send an empty report */
 		length = min_t(unsigned, length, hidg->report_length);
@@ -390,19 +342,33 @@ static int hidg_setup(struct usb_function *f,

 	case ((USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
 		  | HID_REQ_GET_PROTOCOL):
-		VDBG(cdev, "get_protocol\n");
-		goto stall;
+		printk( "get_protocol\n");
+		/*goto stall;*/
+		length = min_t(unsigned, length, 1);
+		if (hidg->bInterfaceSubClass == USB_INTERFACE_SUBCLASS_BOOT)
+			((u8 *) req->buf)[0] = 0;	/* Boot protocol */
+		else
+			((u8 *) req->buf)[0] = 1;	/* Report protocol */
+		goto respond;
 		break;

 	case ((USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
 		  | HID_REQ_SET_REPORT):
-		VDBG(cdev, "set_report | wLenght=%d\n", ctrl->wLength);
+		printk( "set_report | wLenght=%d\n", ctrl->wLength);
 		goto stall;
 		break;

 	case ((USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
 		  | HID_REQ_SET_PROTOCOL):
-		VDBG(cdev, "set_protocol\n");
+		printk( "set_protocol\n");
+		length = 0;
+		if (hidg->bInterfaceSubClass == USB_INTERFACE_SUBCLASS_BOOT) {
+			if (value == 0)		/* Boot protocol */
+				goto respond;
+		} else {
+			if (value == 1)		/* Report protocol */
+				goto respond;
+		}
 		goto stall;
 		break;

@@ -410,14 +376,14 @@ static int hidg_setup(struct usb_function *f,
 		  | USB_REQ_GET_DESCRIPTOR):
 		switch (value >> 8) {
 		case HID_DT_HID:
-			VDBG(cdev, "USB_REQ_GET_DESCRIPTOR: HID\n");
+			printk( "USB_REQ_GET_DESCRIPTOR: HID\n");
 			length = min_t(unsigned short, length,
 						   hidg_desc.bLength);
 			memcpy(req->buf, &hidg_desc, length);
 			goto respond;
 			break;
 		case HID_DT_REPORT:
-			VDBG(cdev, "USB_REQ_GET_DESCRIPTOR: REPORT\n");
+			printk( "USB_REQ_GET_DESCRIPTOR: REPORT\n");
 			length = min_t(unsigned short, length,
 						   hidg->report_desc_length);
 			memcpy(req->buf, hidg->report_desc, length);
@@ -425,7 +391,7 @@ static int hidg_setup(struct usb_function *f,
 			break;

 		default:
-			VDBG(cdev, "Unknown descriptor request 0x%x\n",
+			printk( "Unknown descriptor request 0x%x\n",
 				 value >> 8);
 			goto stall;
 			break;
@@ -433,7 +399,7 @@ static int hidg_setup(struct usb_function *f,
 		break;

 	default:
-		VDBG(cdev, "Unknown request 0x%x\n",
+		printk( "Unknown request 0x%x\n",
 			 ctrl->bRequest);
 		goto stall;
 		break;
@@ -458,10 +424,6 @@ static void hidg_disable(struct usb_function *f)

 	usb_ep_disable(hidg->in_ep);
 	hidg->in_ep->driver_data = NULL;
-
-	usb_ep_disable(hidg->out_ep);
-	hidg->out_ep->driver_data = NULL;
-
 	list_for_each_entry_safe(list, next, &hidg->completed_out_req, list) {
 		list_del(&list->list);
 		kfree(list);
@@ -472,9 +434,9 @@ static int hidg_set_alt(struct usb_function *f, unsigned intf, unsigned alt)
 {
 	struct usb_composite_dev		*cdev = f->config->cdev;
 	struct f_hidg				*hidg = func_to_hidg(f);
-	int i, status = 0;
+	int status = 0;

-	VDBG(cdev, "hidg_set_alt intf:%d alt:%d\n", intf, alt);
+	printk( "hidg_set_alt intf:%d alt:%d\n", intf, alt);

 	if (hidg->in_ep != NULL) {
 		/* restart endpoint */
@@ -495,49 +457,6 @@ static int hidg_set_alt(struct usb_function *f, unsigned intf, unsigned alt)
 		hidg->in_ep->driver_data = hidg;
 	}

-
-	if (hidg->out_ep != NULL) {
-		/* restart endpoint */
-		if (hidg->out_ep->driver_data != NULL)
-			usb_ep_disable(hidg->out_ep);
-
-		status = config_ep_by_speed(f->config->cdev->gadget, f,
-					    hidg->out_ep);
-		if (status) {
-			ERROR(cdev, "config_ep_by_speed FAILED!\n");
-			goto fail;
-		}
-		status = usb_ep_enable(hidg->out_ep);
-		if (status < 0) {
-			ERROR(cdev, "Enable IN endpoint FAILED!\n");
-			goto fail;
-		}
-		hidg->out_ep->driver_data = hidg;
-
-		/*
-		 * allocate a bunch of read buffers and queue them all at once.
-		 */
-		for (i = 0; i < hidg->qlen && status == 0; i++) {
-			struct usb_request *req =
-					hidg_alloc_ep_req(hidg->out_ep,
-							  hidg->report_length);
-			if (req) {
-				req->complete = hidg_set_report_complete;
-				req->context  = hidg;
-				status = usb_ep_queue(hidg->out_ep, req,
-						      GFP_ATOMIC);
-				if (status)
-					ERROR(cdev, "%s queue req --> %d\n",
-						hidg->out_ep->name, status);
-			} else {
-				usb_ep_disable(hidg->out_ep);
-				hidg->out_ep->driver_data = NULL;
-				status = -ENOMEM;
-				goto fail;
-			}
-		}
-	}
-
 fail:
 	return status;
 }
@@ -547,18 +466,20 @@ const struct file_operations f_hidg_fops = {
 	.open		= f_hidg_open,
 	.release	= f_hidg_release,
 	.write		= f_hidg_write,
-	.read		= f_hidg_read,
+	.read		= NULL,
 	.poll		= f_hidg_poll,
 	.llseek		= noop_llseek,
 };

-static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
+static int hidg_bind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct usb_ep		*ep;
 	struct f_hidg		*hidg = func_to_hidg(f);
 	int			status;
 	dev_t			dev;

+	pr_info("%s: creating device %p\n", __func__, hidg);
+
 	/* allocate instance-specific interface IDs, and patch descriptors */
 	status = usb_interface_id(c, f);
 	if (status < 0)
@@ -572,13 +493,6 @@ static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
 		goto fail;
 	ep->driver_data = c->cdev;	/* claim */
 	hidg->in_ep = ep;
-
-	ep = usb_ep_autoconfig(c->cdev->gadget, &hidg_fs_out_ep_desc);
-	if (!ep)
-		goto fail;
-	ep->driver_data = c->cdev;	/* claim */
-	hidg->out_ep = ep;
-
 	/* preallocate request and buffer */
 	status = -ENOMEM;
 	hidg->req = usb_ep_alloc_request(hidg->in_ep, GFP_KERNEL);
@@ -594,17 +508,11 @@ static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
 	hidg_interface_desc.bInterfaceProtocol = hidg->bInterfaceProtocol;
 	hidg_hs_in_ep_desc.wMaxPacketSize = cpu_to_le16(hidg->report_length);
 	hidg_fs_in_ep_desc.wMaxPacketSize = cpu_to_le16(hidg->report_length);
-	hidg_hs_out_ep_desc.wMaxPacketSize = cpu_to_le16(hidg->report_length);
-	hidg_fs_out_ep_desc.wMaxPacketSize = cpu_to_le16(hidg->report_length);
 	hidg_desc.desc[0].bDescriptorType = HID_DT_REPORT;
 	hidg_desc.desc[0].wDescriptorLength =
 		cpu_to_le16(hidg->report_desc_length);
-
 	hidg_hs_in_ep_desc.bEndpointAddress =
 		hidg_fs_in_ep_desc.bEndpointAddress;
-	hidg_hs_out_ep_desc.bEndpointAddress =
-		hidg_fs_out_ep_desc.bEndpointAddress;
-
 	status = usb_assign_descriptors(f, hidg_fs_descriptors,
 			hidg_hs_descriptors, NULL);
 	if (status)
@@ -624,6 +532,7 @@ static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
 		goto fail_free_descs;

 	device_create(hidg_class, NULL, dev, NULL, "%s%d", "hidg", hidg->minor);
+	hacky_device_list_add(hidg);

 	return 0;

@@ -644,12 +553,22 @@ static void hidg_unbind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct f_hidg *hidg = func_to_hidg(f);

+	pr_info("%s: destroying device %p\n", __func__, hidg);
+	/* This does not cover all race conditions, only most common one */
+	mutex_lock(&hidg->lock);
+	hacky_device_list_remove(hidg);
+	mutex_unlock(&hidg->lock);
+
 	device_destroy(hidg_class, MKDEV(major, hidg->minor));
 	cdev_del(&hidg->cdev);

 	/* disable/free request and end point */
 	usb_ep_disable(hidg->in_ep);
-	usb_ep_dequeue(hidg->in_ep, hidg->req);
+	/*usb_ep_dequeue(hidg->in_ep, hidg->req);*/
+	/* TODO: calling this function crash kernel,
+	   not calling this funct ion crash kernel inside f_hidg_write */
+	/* usb_ep_dequeue(hidg->in_ep, hidg->req); */
+
 	kfree(hidg->req->buf);
 	usb_ep_free_request(hidg->in_ep, hidg->req);

@@ -682,7 +601,7 @@ static struct usb_gadget_strings *ct_func_strings[] = {
 /*-------------------------------------------------------------------------*/
 /*                             usb_configuration                           */

-int __init hidg_bind_config(struct usb_configuration *c,
+int hidg_bind_config(struct usb_configuration *c,
 			    struct hidg_func_descriptor *fdesc, int index)
 {
 	struct f_hidg *hidg;
@@ -736,7 +655,7 @@ int __init hidg_bind_config(struct usb_configuration *c,
 	return status;
 }

-int __init ghid_setup(struct usb_gadget *g, int count)
+int ghid_setup(struct usb_gadget *g, int count)
 {
 	int status;
 	dev_t dev;
diff --git a/drivers/usb/gadget/function/f_hid.h b/drivers/usb/gadget/function/f_hid.h
new file mode 100644
index 000000000000..72c4e06b8dca
--- /dev/null
+++ b/drivers/usb/gadget/function/f_hid.h
@@ -0,0 +1,17 @@
+#ifndef _GADGET_F_HID_H
+#define _GADGET_F_HID_H
+
+#include <linux/hid.h>
+#include <linux/usb/composite.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/g_hid.h>
+
+int hidg_bind_config(struct usb_configuration *c,
+			    struct hidg_func_descriptor *fdesc, int index);
+
+int ghid_setup(struct usb_gadget *g, int count);
+
+void ghid_cleanup(void);
+
+#endif
+
diff --git a/drivers/usb/gadget/function/f_hid_vendor.c b/drivers/usb/gadget/function/f_hid_vendor.c
new file mode 100644
index 000000000000..311f409e7722
--- /dev/null
+++ b/drivers/usb/gadget/function/f_hid_vendor.c
@@ -0,0 +1,22 @@
+#include <linux/platform_device.h>
+#include <linux/usb/g_hid.h>
+
+static struct hidg_func_descriptor ghid_device_android_vendor = {
+	.subclass		= 1,
+	.protocol		= 0,
+	.report_length		= 16,
+	.report_desc_length	= 20,
+	.report_desc		= {
+		0x06, 0x00, 0xFF,//Usage Page (Vendor-Defined 1)
+		0x09, 0x01,//Usage (Vendor-Defined 1)
+		0xA1, 0x01,//Collection (Application)
+		0x09, 0x00,//Usage (Undefined)
+		0x15, 0x00,//Logical Minimum (0)
+		0x25, 0x64,//Logical Maximum (100)
+		0x75, 0x08,//Report Size (8)
+		0x95, 0x10,//Report Count (8)
+		//0x81, 0x06,//Input (Data,Var,Rel,NWrp,Lin,Pref,NNul,Bit)
+		0x81, 0x00,	/*   INPUT (Data,Ary,Abs)*/
+		0xc0		/* END_COLLECTION*/
+	}
+};
diff --git a/include/linux/usb/android.h b/include/linux/usb/android.h
index 8ce93e39d605..440b9d042a25 100644
--- a/include/linux/usb/android.h
+++ b/include/linux/usb/android.h
@@ -42,6 +42,7 @@ enum android_function_index {
 	ANDROID_AUDIO_SRC,
 	ANDROID_CHARGER,
 	ANDROID_MIDI,
+	ANDROID_HID,
 	ANDROID_RNDIS_GSI,
 	ANDROID_ECM_GSI,
 	ANDROID_RMNET_GSI,
@@ -100,6 +101,8 @@ static enum android_function_index name_to_func_idx(const char *name)
 		return ANDROID_AUDIO_SRC;
 	if (!strncasecmp("MIDI", name, FUNC_NAME_LEN))
 		return ANDROID_MIDI;
+	if (!strncasecmp("HID", name, FUNC_NAME_LEN))
+		return ANDROID_HID;
 	if (!strncasecmp("RNDIS_GSI", name, FUNC_NAME_LEN))
 		return ANDROID_RNDIS_GSI;
 	if (!strncasecmp("ECM_GSI", name, FUNC_NAME_LEN))
--
2.15.0

